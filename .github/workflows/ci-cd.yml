name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Ejecuta el pipeline en cada push a la rama main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout código fuente
        uses: actions/checkout@v3

      - name: 🔧 Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📂 Listar archivos después de checkout (opcional para depuración)
        run: ls -R

      - name: 📦 Dar permisos de ejecución al wrapper de Gradle
        run: chmod +x gradlew  # Asegurar que el wrapper de Gradle puede ejecutarse

      - name: 🏗️ Compilar aplicación con Gradle
        run: ./gradlew build -x test  # Construir sin ejecutar pruebas

      - name: 🔍 Obtener la última versión en Docker Hub
        run: |
          VERSIONES=$(curl -s "https://hub.docker.com/v2/repositories/nicolasortiz05/back-taller/tags" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          if [[ -z "$VERSIONES" ]]; then
            NUEVA_VERSION="1.0"
          else
            NUEVA_VERSION=$(echo $VERSIONES | awk -F. '{print $1"."$2+1}')
          fi
          echo "Nueva versión: $NUEVA_VERSION"
          echo "NUEVA_VERSION=$NUEVA_VERSION" >> $GITHUB_ENV

      - name: 🔨 Construir imagen Docker
        run: |
          docker build -t nicolasortiz05/back-taller:${{ env.NUEVA_VERSION }} .
          docker build -t nicolasortiz05/back-taller:latest .

      - name: 🔑 Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🚀 Subir imagen a Docker Hub
        run: |
          docker push nicolasortiz05/back-taller:${{ env.NUEVA_VERSION }}
          docker push nicolasortiz05/back-taller:latest


      - name: 🔄 Actualizar kustomization.yaml en el repositorio de configuración
        run: |
          # Clonar el repositorio de configuración de ArgoCD
          git clone https://github.com/NicolasOrtiz05/back_taller_argocd.git
          cd back_taller_argocd
          
          # Actualizar el newTag en kustomization.yaml con la nueva versión
          sed -i "s/newTag: .*/newTag: \"${{ env.NUEVA_VERSION }}\"/" kustomization.yaml
          
          # Configurar Git para commit
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          
          git add kustomization.yaml
          git commit -m "🚀 Actualizando imagen a versión ${{ env.NUEVA_VERSION }}"
